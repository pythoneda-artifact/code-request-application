# vim: set fileencoding=utf-8
"""
pythoneda/artifact/code_request/application/pythoneda_context.py

This file can be used to run PythonEDA within a code request.

Copyright (C) 2023-today rydnr's pythoneda-artifact/code-request-application

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import asyncio
from pythoneda.shared.application import PythonEDA


class PythonedaContext(PythonEDA):
    """
    Runs the PythonEDA within a code request.

    Class name: PythonedaContext

    Responsibilities:
        - Runs PythonEDA, providing a hook to run specific tasks.

    Collaborators:
        - None
    """

    def __init__(self):
        """
        Creates a new PythonedaContext instance.
        """
        # code_request_banner is automatically generated by pythoneda-artifact/code-request-application
        try:
            from pythoneda.artifact.code_request.application.code_request_banner import (
                CodeRequestBanner,
            )

            banner = CodeRequestBanner()
        except ImportError:
            banner = None
        super().__init__(banner, __file__)

    async def after_bootstrap(self):
        """
        Hook to run code after the bootstrap process.
        """
        await self.emit_event()

    async def emit_event(self):
        """
        Emits events as part of running the code request.
        """
        pass


if __name__ == "__main__":
    asyncio.run(
        PythonedaContext.main(
            "pythoneda.artifact.code_request.application.PythonedaContext"
        )
    )
# vim: syntax=python ts=4 sw=4 sts=4 tw=79 sr et
# Local Variables:
# mode: python
# python-indent-offset: 4
# tab-width: 4
# indent-tabs-mode: nil
# fill-column: 79
# End:
